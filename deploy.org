#+begin_src conf :tangle /ssh:csaf-new|sudo:csaf-new:/etc/nginx/sites-available/csaf
upstream csaf {
  server 127.0.0.1:9878;
  keepalive 32;
}

map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

limit_req_zone $binary_remote_addr zone=csaflimit:10m rate=5r/s;

server {
    server_name csaf.occasionallycogent.com csaf.ca www.csaf.ca;

    access_log /var/log/nginx/csaf.access.log;
    error_log /var/log/nginx/csaf.error.log;

    if ($host = csaf.ca) {
        return 301 $scheme://www.csaf.ca$request_uri;
    }

    location /static-docs/ {
        gzip_static on;
        alias /var/www/csaf-docs/;
    }

    location / {
        limit_req zone=csaflimit burst=10 nodelay;
        proxy_pass http://csaf;
        proxy_http_version 1.1;
        proxy_redirect off;
        proxy_read_timeout 2m;
        proxy_connect_timeout 2m;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
    }


    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/csaf.occasionallycogent.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/csaf.occasionallycogent.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot




}


server {
    if ($host = csaf.occasionallycogent.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name csaf.occasionallycogent.com;
    listen 80;
    listen [::]:80;
    return 404; # managed by Certbot


}
#+end_src

#+begin_src conf :tangle /ssh:csaf-new:/home/james/csaf/csaf.service
[Unit]
Description=CSAF server
After=network.target

[Service]
Type=simple
User=james
Group=james
WorkingDirectory=/home/james/csaf
ExecStart=/usr/bin/java -server -Xmx900m -Dfile.encoding=UTF8 -Dclojure.server.repl="{:port 8888 :accept clojure.core.server/repl}" -jar /home/james/csaf/csaf.jar
Restart=always
RestartSec=30
TimeoutStartSec=60
StartLimitInterval=0

[Install]
WantedBy=default.target
#+end_src

Restarter service

#+begin_src conf :tangle /ssh:csaf-new:/home/james/csaf/csaf_watcher.service
[Unit]
Description=Restarts CSAF server on path changed
After=network.target

[Service]
Type=oneshot
ExecStart=/usr/bin/systemctl restart csaf.service

[Install]
WantedBy=multi-user.target
#+end_src

Path watcher

#+begin_src conf :tangle /ssh:csaf-new:/home/james/csaf/csaf_watcher.path
[Unit]
Wants=csaf_watcher.service

[Path]
PathChanged=/home/james/csaf/deployed

[Install]
WantedBy=multi-user.target
#+end_src

#+begin_src sh :dir /ssh:csaf-new|sudo:csaf-new:~/
#ln -sf /home/james/csaf/csaf.service /etc/systemd/system
ln -sf /home/james/csaf/csaf_watcher.service /etc/systemd/system
ln -sf /home/james/csaf/csaf_watcher.path /etc/systemd/system
#+end_src

#+RESULTS:

#+begin_src sh :dir /ssh:csaf-new|sudo:csaf-new:~/
systemctl daemon-reload
#systemctl enable csaf.service
systemctl enable csaf_watcher.service
systemctl enable csaf_watcher.path
#systemctl start  csaf.service
systemctl start  csaf_watcher.service
systemctl start  csaf_watcher.path
#+end_src

#+RESULTS:
